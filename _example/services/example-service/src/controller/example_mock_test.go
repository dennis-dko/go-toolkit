// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package controller

import (
	"context"
	"github.com/dennis-dko/go-toolkit/example/src/model"
	"github.com/dennis-dko/go-toolkit/example/src/service"
	"sync"
)

// Ensure, that ExampleRepositoryMock does implement service.ExampleRepository.
// If this is not the case, regenerate this file with moq.
var _ service.ExampleRepository = &ExampleRepositoryMock{}

// ExampleRepositoryMock is a mock implementation of service.ExampleRepository.
//
//	func TestSomethingThatUsesExampleRepository(t *testing.T) {
//
//		// make and configure a mocked service.ExampleRepository
//		mockedExampleRepository := &ExampleRepositoryMock{
//			ExampleCheckFunc: func(ctx context.Context, filter *model.Example) (*map[string]map[string]bool, error) {
//				panic("mock out the ExampleCheck method")
//			},
//			FindAllFunc: func(ctx context.Context) ([]model.Example, error) {
//				panic("mock out the FindAll method")
//			},
//			InsertFunc: func(ctx context.Context, create model.Example) error {
//				panic("mock out the Insert method")
//			},
//		}
//
//		// use mockedExampleRepository in code that requires service.ExampleRepository
//		// and then make assertions.
//
//	}
type ExampleRepositoryMock struct {
	// ExampleCheckFunc mocks the ExampleCheck method.
	ExampleCheckFunc func(ctx context.Context, filter *model.Example) (*map[string]map[string]bool, error)

	// FindAllFunc mocks the FindAll method.
	FindAllFunc func(ctx context.Context) ([]model.Example, error)

	// InsertFunc mocks the Insert method.
	InsertFunc func(ctx context.Context, create model.Example) error

	// calls tracks calls to the methods.
	calls struct {
		// ExampleCheck holds details about calls to the ExampleCheck method.
		ExampleCheck []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Filter is the filter argument value.
			Filter *model.Example
		}
		// FindAll holds details about calls to the FindAll method.
		FindAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Insert holds details about calls to the Insert method.
		Insert []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Create is the create argument value.
			Create model.Example
		}
	}
	lockExampleCheck sync.RWMutex
	lockFindAll      sync.RWMutex
	lockInsert       sync.RWMutex
}

// ExampleCheck calls ExampleCheckFunc.
func (mock *ExampleRepositoryMock) ExampleCheck(ctx context.Context, filter *model.Example) (*map[string]map[string]bool, error) {
	if mock.ExampleCheckFunc == nil {
		panic("ExampleRepositoryMock.ExampleCheckFunc: method is nil but ExampleRepository.ExampleCheck was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Filter *model.Example
	}{
		Ctx:    ctx,
		Filter: filter,
	}
	mock.lockExampleCheck.Lock()
	mock.calls.ExampleCheck = append(mock.calls.ExampleCheck, callInfo)
	mock.lockExampleCheck.Unlock()
	return mock.ExampleCheckFunc(ctx, filter)
}

// ExampleCheckCalls gets all the calls that were made to ExampleCheck.
// Check the length with:
//
//	len(mockedExampleRepository.ExampleCheckCalls())
func (mock *ExampleRepositoryMock) ExampleCheckCalls() []struct {
	Ctx    context.Context
	Filter *model.Example
} {
	var calls []struct {
		Ctx    context.Context
		Filter *model.Example
	}
	mock.lockExampleCheck.RLock()
	calls = mock.calls.ExampleCheck
	mock.lockExampleCheck.RUnlock()
	return calls
}

// FindAll calls FindAllFunc.
func (mock *ExampleRepositoryMock) FindAll(ctx context.Context) ([]model.Example, error) {
	if mock.FindAllFunc == nil {
		panic("ExampleRepositoryMock.FindAllFunc: method is nil but ExampleRepository.FindAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockFindAll.Lock()
	mock.calls.FindAll = append(mock.calls.FindAll, callInfo)
	mock.lockFindAll.Unlock()
	return mock.FindAllFunc(ctx)
}

// FindAllCalls gets all the calls that were made to FindAll.
// Check the length with:
//
//	len(mockedExampleRepository.FindAllCalls())
func (mock *ExampleRepositoryMock) FindAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockFindAll.RLock()
	calls = mock.calls.FindAll
	mock.lockFindAll.RUnlock()
	return calls
}

// Insert calls InsertFunc.
func (mock *ExampleRepositoryMock) Insert(ctx context.Context, create model.Example) error {
	if mock.InsertFunc == nil {
		panic("ExampleRepositoryMock.InsertFunc: method is nil but ExampleRepository.Insert was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Create model.Example
	}{
		Ctx:    ctx,
		Create: create,
	}
	mock.lockInsert.Lock()
	mock.calls.Insert = append(mock.calls.Insert, callInfo)
	mock.lockInsert.Unlock()
	return mock.InsertFunc(ctx, create)
}

// InsertCalls gets all the calls that were made to Insert.
// Check the length with:
//
//	len(mockedExampleRepository.InsertCalls())
func (mock *ExampleRepositoryMock) InsertCalls() []struct {
	Ctx    context.Context
	Create model.Example
} {
	var calls []struct {
		Ctx    context.Context
		Create model.Example
	}
	mock.lockInsert.RLock()
	calls = mock.calls.Insert
	mock.lockInsert.RUnlock()
	return calls
}
